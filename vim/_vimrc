" ================
" Program options.
" ================
set nocompatible
set visualbell
set title
set viminfo='20,\"50
" loading etc.
set autoread
set ttyfast
set lazyredraw
set hidden
" backup
set nobackup
set writebackup
set backupcopy=yes

" ===========
" Extensions.
" ===========

" +++++++
" >> dein
" +++++++
let s:dein_dir = expand('~/vim_share/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

if &runtimepath !~# '/dein.vim'
    if !isdirectory(s:dein_repo_dir)
        execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
    endif
    execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

call dein#begin(s:dein_dir)

let s:dein_toml      = '~/dotfiles/vim/dein/dein.toml'
let s:dein_lazy_toml = '~/dotfiles/vim/dein/dein_lazy.toml'
let s:site_dein_toml      = '~/vim_share/dein/site_dein.toml'
let s:site_dein_lazy_toml = '~/vim_share/dein/site_dein_lazy.toml'

if dein#load_cache([expand('<sfile>'), s:dein_toml, s:dein_lazy_toml])
    call dein#load_toml(s:dein_toml,      {'lazy': 0})
    call dein#load_toml(s:dein_lazy_toml, {'lazy': 1})

    call dein#load_toml(s:site_dein_toml,      {'lazy': 0})
    call dein#load_toml(s:site_dein_lazy_toml, {'lazy': 1})

    call dein#save_cache()
endif

call dein#end()

if dein#check_install()
    call dein#install()
endif
" +++++++
" << dein
" +++++++

" ++++++++++++++
" >> theNERDTree
" ++++++++++++++
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
nnoremap tr :NERDTreeToggle<CR>
nnoremap tp :NERDTree<Space>
" ++++++++++++++
" << theNERDTree
" ++++++++++++++

" ++++++++++++++++
" >> Neocomplcache
" ++++++++++++++++
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<TAB>"
set completeopt-=preview
" ++++++++++++++++
" << Neocomplcache
" ++++++++++++++++

" ++++++++++++++++
" >> lightline.vim
" ++++++++++++++++
let g:lightline = {}
let g:lightline.colorscheme = 'jellybeans'
let g:lightline.active = {}
let g:lightline.inactive = {}
let g:lightline.active.left = [
\    ['mode', 'paste'],
\    ['fugitive', 'filename'],
\    ['ctrlpmark'],
\]
let g:lightline.active.right = [
\    ['lineinfo'],
\    ['percent'],
\    ['fileformat', 'fileencoding', 'filetype'],
\]
let g:lightline.inactive.left = [
\    ['mode'],
\    ['fugitive', 'filename'],
\]
let g:lightline.inactive.right = g:lightline.active.right
let g:lightline.subseparator = {'left': '⮁', 'right': '⮃'}
let g:lightline.tabline = {}
let g:lightline.tabline.right = [
\    ['cwd'],
\    ['bufdir'],
\    ['lines'],
\]
let g:lightline.tab = {'active': ['tabnr', 'filename']}
let g:lightline.tab.inactive = g:lightline.tab.active
let g:lightline.component_function = {
\    'mode': 'MyMode',
\    'fugitive': 'MyFugitive',
\    'filename': 'MyFilename',
\    'lineinfo': 'MyLineInfo',
\    'percent': 'MyPercent',
\    'fileformat': 'MyFileformat',
\    'fileencoding': 'MyFileencoding',
\    'filetype': 'MyFiletype',
\    'ctrlpmark': 'CtrlPMark',
\    'lines': 'MyLines',
\    'cwd': 'MyCWD',
\    'bufdir': 'MyBufDir',
\}
let g:lightline.tab_component_function = {
\    'tabnr': 'MyTabnr',
\    'filename': 'MyTabname',
\}

function! MyModeDetect(fname)
    return a:fname == '__Tagbar__' ? 'tagbar' :
         \ a:fname == 'ControlP' ? 'ctrlp' :
         \ a:fname == '[Command Line]' ? 'cmd' :
         \ a:fname =~ 'NERD_tree.*' ? 'nerd' :
         \ a:fname != '' ? 'file' :
         \ 'blank'
endfunction

function! MyMode()
    let l:modestr = {
    \    'tagbar': ' Tagbar ',
    \    'ctrlp': ' CtrlP ',
    \    'nerd': 'NERDTree',
    \}
    let l:mode = MyModeDetect(expand('%:t'))
    return has_key(l:modestr, l:mode) ? l:modestr[l:mode] :
         \ winwidth('.') > 60 ? ' ' . lightline#mode() . ' ' : ''
endfunction

function! MyFugitive()
    let l:mode = MyModeDetect(expand('%:t'))
    try
        if l:mode != 'nerd' &&
             \ l:mode != 'tagbar' &&
             \ l:mode != 'ctrlp' &&
             \ exists('*fugitive#head')
            let l:mark = '⭠ '
            let l:branch = fugitive#head()
            return strlen(l:branch) ? l:mark . l:branch : ''
        endif
    catch
    endtry
    return ''
endfunction

function! MyFilename()
    let l:fname = expand('%:t')
    let l:mode = MyModeDetect(l:fname)
    let l:sp_bufname = {
    \    'tagbar': '',
    \    'nerd': '',
    \}
    let l:bufname = {
    \    'cmd': '⚙',
    \    'file': fnamemodify(l:fname, ':t'),
    \    'blank': '☄ ',
    \}
    return l:mode == 'ctrlp' ? g:lightline.ctrlp_item :
         \ has_key(l:sp_bufname, l:mode) ? l:sp_bufname[l:mode] :
         \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
         \ l:bufname[l:mode] .
         \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyReadonly()
    return &ft !~? 'help' && &readonly ? '⭤' : ''
endfunction

function! MyModified()
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyLineInfo()
    return '⭡ ' . line('.') . ':' . col('.')
endfunction

function! MyPercent()
    let l:selection = {'pos': '⌖ ', 'at': '﹫'}
    let l:percent = printf("%.1f", 100.0 * line('.') / line('$'))
    return l:selection.pos . l:percent . '%'
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'φ ') : ''
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'
function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
   return lightline#statusline(0)
endfunction

function! CtrlPMark()
    if MyModeDetect(expand('%:t')) == 'ctrlp'
        call lightline#link('iR'[g:lightline.ctrlp_regex])
        return lightline#concatenate([g:lightline.ctrlp_prev,
                                    \ g:lightline.ctrlp_item,
                                    \ g:lightline.ctrlp_next], 0)
    else
        return ''
    endif
endfunction

let g:ctrlp_status_func = {
    \ 'main': 'CtrlPStatusFunc_1',
    \ 'prog': 'CtrlPStatusFunc_2',
\ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
endfunction

function! MyLines()
    return '↡ ' . line('$')
endfunction

function! MyCWD()
    let l:dir = fnamemodify(getcwd(), ':~')
    let l:dir = strlen(l:dir) < 20 ? l:dir : MyShortenPath(l:dir)
    return '۩ ' . l:dir
endfunction

function! MyBufDir()
    let l:dir = fnamemodify(expand('%:h'), ':~')
    let l:dir = strlen(l:dir) < 40 ? l:dir : MyShortenPath(l:dir)
    return '⌖ ' . l:dir
endfunction

function! MyShortenPath(path)
    let l:abbrev_str = '..'
    let l:shortened_length = 2
    let l:parts = split(a:path, '/')
    let l:shorten = []
    for l:part in l:parts[:-2]
        if strlen(l:part) >  (l:shortened_length + strlen(l:abbrev_str))
            call add(l:shorten, l:part[0:(l:shortened_length - 1)] . l:abbrev_str)
        else
            call add(l:shorten, l:part)
        endif
    endfor
    call add(l:shorten, l:parts[-1])
    return join(l:shorten, '/')
endfunction

function! MyTabnr(tabnr)
    return '№ ' . a:tabnr
endfunction

function! MyTabname(tabnr)
    let l:fname = bufname(MyTabnr2Bufnr(a:tabnr))
    let l:mode = MyModeDetect(l:fname)

    let l:sp_bufname = {
    \    'ctrlp': 'P',
    \    'tagbar': 'T',
    \    'nerd': 'N',
    \    'cmd': 'C',
    \}
    let l:bufname = {
    \    'file': fnamemodify(l:fname, ':t'),
    \    'blank': '☄ ',
    \}

    return (has_key(l:sp_bufname, l:mode) ? '⚙ ' . l:sp_bufname[l:mode] :
         \  MyTabnameDecoration(l:bufname[l:mode], a:tabnr))
endfunction

function! MyTabnr2Bufnr(tabnr)
    let l:buflist = tabpagebuflist(a:tabnr)
    let l:winnr = tabpagewinnr(a:tabnr)
    return buflist[winnr - 1]
endfunction

function! MyTabnameDecoration(tabname, tabnr)
    let l:ro = MyTabReadonly(a:tabnr) ? MyTabReadonly(a:tabnr) + ' ' : ''
    let l:modable = lightline#tab#modified(a:tabnr)
    let l:modable = l:modable != '' ? ' ' . l:modable : ''
    return l:ro . a:tabname . l:modable
endfunction

function! MyTabReadonly(tabnr)
    let l:ro = lightline#tab#readonly(a:tabnr)
    return l:ro == 'RO' ? '⭤' : ''
endfunction

" always show status line
set laststatus=2
" and tab line
set showtabline=2
" ++++++++++++++++
" << lightline.vim
" ++++++++++++++++

" ++++++++++++
" >> emmet-vim
" ++++++++++++
let g:user_emmet_settings = {
\    'lang': 'ja',
\    'html' : {
\        'indentation' : '  '
\    }
\}
" ++++++++++++
" << emmet-vim
" ++++++++++++

" +++++++++
" >> Ctrl-P
" +++++++++
nnoremap tb :CtrlPBuffer<CR>
let g:ctrlp_map = '<Nop>'
let g:ctrlp_match_window = 'bottom,order:ttb,min:6,max:' . &lines
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("t")': ['<C-o>'],
    \ 'OpenMulti()':          ['<C-m>'],
    \ 'PrtExit()':            ['<esc>', '<c-c>', '<C-e>'],
    \ 'PrtCurEnd()':          ['<c-g>'],
\}
let g:ctrlp_switch_buffer = 1
let g:ctrlp_working_path_mode = 'ra'
" +++++++++
" << Ctrl-P
" +++++++++

" +++++++++
" >> Tagbar
" +++++++++
let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_iconchars = ['<>', '<->']
let g:tagbar_map_jump = '<C-j>'
let g:tagbar_width = 35
nnoremap tgb :TagbarToggle<CR>
" +++++++++
" << Tagbar
" +++++++++

" ++++++++++++++++++++++++++++
" >> accelerated-smooth-scroll
" ++++++++++++++++++++++++++++
let g:ac_smooth_scroll_du_sleep_time_msec = 5
" ++++++++++++++++++++++++++++
" << accelerated-smooth-scroll
" ++++++++++++++++++++++++++++

" =====================
" Command line options.
" =====================
set history=50
" commands etc.
set wildmenu
set showcmd
" search
set hlsearch
set wrapscan
set incsearch
set ignorecase
set smartcase

" ===========
" UI options.
" ===========

syntax enable
" line number & ruler, etc.
set number
function! ToggleRelativeNumber()
    if &number
        set relativenumber
    elseif &relativenumber
        set number
        set nonumber
    else
        set number
    endif
endfunction
nnoremap <leader>n :call ToggleRelativeNumber()<CR>
set ruler
set cursorline
set cursorcolumn
set fillchars=vert:\ 
set guicursor=n-v-c:block,o:hor50,i-ci:hor15,r-cr:hor30,sm:block,a:blinkon0
set scrolloff=3
nnoremap <C-p> :echo expand('%:p')<CR>
set formatoptions=ql
set nolinebreak
" toggle literary text wrapping mode
function! ToggleLiteraryTextWrapping()
    if &linebreak
        set nolinebreak
    else
        set linebreak
    endif
endfunction
nnoremap <leader>l :call ToggleLiteraryTextWrapping()<CR>

" >> rendering
" ++++++++++++
set showmatch
" for unicodes
set fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,shift-jis,cp932,latin1
set fileformats=unix,dos,mac
" <tab> width in view
set tabstop=8
" ++++++++++++
" << rendering

" >> color settings
" +++++++++++++++++
set t_Co=256
colorscheme jellybeans
" dynamic colors
noremap <expr><S-t> ":let g:zenburn_high_Contrast=0<CR> :colorscheme zenburn<CR>"
noremap <expr><S-y> ":let g:zenburn_high_Contrast=1<CR> :colorscheme zenburn<CR>"
noremap <expr><C-c> ":colorscheme inkpot<CR>"
noremap <expr><S-j> ":colorscheme jellybeans<CR>"
noremap <expr><S-b> ":colorscheme BusyBee<CR>"
noremap <expr><C-l> ":colorscheme landscape<CR>"
noremap <expr><C-o> ":colorscheme sorcerer<CR>"
noremap <expr><S-h> ":colorscheme hemisu<CR>"
noremap <expr><S-l> ":colorscheme summerfruit256<CR>"
" +++++++++++++++++
" << color settings

" >> edit
" +++++++
set backspace=indent,eol,start
set expandtab
" for tab width
function! MyTabWidth()
    let l:tabwidth = 4
    let l:shorttab = ['ruby', 'html', 'scala', 'tex', 'xml', 'coffee']
    if (index(l:shorttab, &filetype) > -1)
        let l:tabwidth = 2
    endif
    return l:tabwidth
endfunction
" <tab> is replced with spaces:
autocmd FileType * execute 'set softtabstop=' . MyTabWidth()
" in auto-mode
autocmd FileType * execute 'set shiftwidth=' . MyTabWidth()
set noautoindent
set nosmartindent
set nopaste
nnoremap <leader>p :set paste!<CR>
" +++++++
" << edit

" ===============
" Other Keybinds.
" ===============

nnoremap j gj
nnoremap k gk
nnoremap <Tab> %
inoremap <C-@> <C-[>
nnoremap <C-e> <Esc>
inoremap <C-e> <Esc>
vnoremap <C-e> <Esc>

" << Tabpages
" +++++++++++
nnoremap tn :tabnew<CR>

" for moving tab
function! CurrentTabToLast()
    let l:current = tabpagenr()
    let l:to_move = bufname('%')
    execute 'tabmove ' . tabpagenr('$')
    execute 'normal ' . l:current . 'gt'
    redraw
    echomsg 'moved to last: "' . l:to_move . '".'
endfunction
nnoremap tl :call CurrentTabToLast()<CR>

function! MoveTabToVisualIndex(index)
    let l:index = a:index - 1
    execute 'tabmove ' . l:index
endfunction
command! -nargs=1 ReadableTabMove :call MoveTabToVisualIndex(<args>)
nnoremap tm :execute "ReadableTabMove "<Space>.<Space>

" for switching tab
set swb=usetab
" +++++++++++
" << Tabpages

" ==============
" Site settings.
" ==============
source ~/site_vimrc
